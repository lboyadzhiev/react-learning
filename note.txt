how to create repo

    1. За стандартен средно голям проект си създаваме две папки - frontEnd and beckEnd.

	2. В папката на frontEnd - a  = npx create-react-app .(точката означава в текущата папка).

	3. Отиваме в  GitHub и си зъдаваме ново репо

		- open GitHub -> new repository -> write name -> description
		- open vs code console -> git init -> "git status" -> git add * (will add all folders) -> git commit -m "Initial commit" ->
		- go to GitHub -> create repository
		- take commands for - push an existing repository from the command line

Wokring with GitHub

	1. Create New Branch from current branch:
		-- git checkout -b name_of_the_new_branch;
	
	2. Switch to a branch:

		-- git checkout name_of_the_branch;

	3. Pull from branch 

		-- git pull name of the branch;

		
How to give access to another git account in GitHub

	1. Navigate to the main page of the repository,
	2. Under repository name, click 'Settings',
	3. In the 'Access' section of the sidebar -> click 'Collaborators &t teams.
	4. click 'Invite a collaborator'.

Create react app

	1. npx create-react-app . ro my-appName;

		We need to have node.js installed in order to to this command;

Adding Basic CSS styling

	Basically add css file next the js file with the same name as the component but with '.css' in the end;

	In the js file we need to import css file; 'import "./Name.css"

	For adding more than one class in wrapper component:

		create variable for classes,

		const classes = 'someName ' + props.classes;

		and add the classes dinamicaly 

		className={classes}

	How React create elements: 

		React.createElement():

			it takes three arguments:
				1. the HTML element that we whant to create,
				2. the arguments wich specify the html element - classes,props, etc,
				3. is the content wich we whant to add.

	React State & Working with Events

		React it follow declarative aproach, where in the end we define the disired target state and let React fegure out the actual JS DOM instructions.

		Module Content 

			Handlin Events;
			Updating the UI & Working with 'State';

		In the end our component is a function, we need to call it, so that is why when we write just a variable and try to change the variable, nothin is changin, becuase our function is not being call. That is why we use a special function called state.

		State is separated by per component instance. 

		! Updating a state that depends on the prev state:

			When ever we want to change a state which depend on prev state we are doing it by passing a function into updatin State function, and pass as an argument the prev state.

	Dynamic content

		We can store JSX conten in variable;

	============= WORKING WITH FORMS ===========

	What is Complex About Froms?

    Forms and inputs can assume different sates:

        1. One or more inputs are invalid

            -- Output input-specific error messages & highlight problems inputs;
            -- Ensure form can't be submitted;

        2. All inputs are valid

			-- Allow form to be submited / saved;

	When To Validate?

		1. When form is submited;

			-- Allows the user to enter a valid value before warning his/her;
			-- This avoid unnecessary warnings but maybe present feedback 'too late';

		2. When a input is losing focus;

			-- Allows the user to enter a valid value before warning him / her;
			-- This is useful for untouched forms - where the user hasn't add anything yet;

		3. On every keystroke;

			-- Warns user before he / she had a chance of entering valid values;
			-- If applied only on invalid inputs, has the potential of providing more direct feedback;


	============ HTTP ==========================

	We are not allowed to pass an async function to a useEffect. 
	If we throw an error in a promise, this couse promise to reject.


	============ TESTING ==============================

	What is 'Testing" and Why?

		-- Manual Testing

			Erro-prone: It's hard to test all possible combinations and scenarios

		-- Automated Testing

			Write code that tests the rest of the code.
			We test the individual building blocks of our app.
			Very technical but allows us to test ALL building blocks at once.

	Different Kind Of Automated Tests
		
		-- Unit Tests;

			Writing test for smallest units. Test the individual blocks (functions, components) in isolation;
			Projects typically contain dozens or hundreds of unit test;
			The most common / important kind of test;

		-- Integration Test;

			Test the combination of multiple building blocks;
			Projects typically contain a couple of integration tests;
			Also important, but focus on unit tests in most cases;

		-- End-to-End (e2e) Tests;

			Test complete scenarios in our app as the user would experience them;
			Projects typically contain only a few e2e tests;
			Important but can also be done manually (partially);


	Understanding Unit Tests

		What To Test + How?

		-- What to test:

			Test the different building blocks;
			Unit Tests: The smallest building blocks that make up our app;

		-- How:

			Test success and error cases, also test rare(but possible) results;

		Understanding the Technical Setup & Involved Tools

			-- We need a tool for running our tests and asserting the results;

				We use 'jest', is no the only tool but is very popular and is easy to use with React;

			-- We need a tool for 'simulating' (rendering) our Reac app / components;

				We use a React Testing Library;

			-- Both tools are already set up for us when using 'create-react-app';

	Testing React Components & Building Blocks

		-- Writing tests

			Convension:

				Write the test as close as possible to the thing we want to test!!!!!

				We start writing our test with 'test()' function which is global available, we don't neet to import it. It takes two arguments.

					The frist argument we give a test descrition, the second argument is anonymus function which contains the actual testing code.
					In this function we typically want to do 3 things - the three 'A's:

						1. Arrange	-> Set up the test data, test conditions and test environment;
						2. Act 		-> Run logic that should be tested (e.g. execute function);
						3. Assert 	-> Compare execution results with expected results;

			Grouping Tests Together With Test Suits

				We orginizing the test in different test suits. We are creating testing suits by using globally describe function - 'describe()';

				describe()

					We give two arguments:

						1. Description - different category in which this test belong to;
						2. also anonomys function and put different test in there;

				'userEvent()' 

					need to import - it is object which helps us trigger user events in the virtual screen.

			Testing Connected Components

				There is no need to split the test in the conjunction components, if there is no different block logic;

			Testing Asynchronous code

				To work with async funtions we need to use 'find' queries instead of 'get', find returns a promise. With the find method we have a third argument - it specify a time to wait, by default it is 1second.

				And in order this to work we need to pass an async function as second argument in test function, and put await before 'find' method.

			Working With Mocks

				When we run our test we don't want to send http request to our servers (we run alot of test), and it will caouse alot of network trafic. And if we make an post request it will start filling  or changind staff in our database, which we don't want.

				When we run our test, we want no to send request to the servers or send request to some test server. 

				We can replace the fetch function with 'mock' function - dummy function;

					We can do this with 

						window.fetch = 'jest.fn()'
						window.fetch.mockResolvedValueOnce({
							json: async () => [{id: 'p1', title: 'First post'}]
						})

					By this way we are simulating a success, and we are no sending an api request.

			



		-- To run tests in React we have alreacy done command - 'npm test';
		

